import gzip,cPickle
import numpy as np

def loadData(fnam):
    with gzip.open(fnam,'rb') as f: return cPickle.load(f)

BA = loadData('recommender/reviews.pklz2')
RB = loadData('scraper/scrape_ratebeer.pklz')

#BA_brewers = np.array([b[0] for b in BA['beers']])
#BA_beers = np.array([b[1] for b in BA['beers']])
BA_beers = BA['beers']
RB_beers = np.array([ [i['brewery'],i['name']] for i in RB['beers'] ])

# generate index mapping each RB entry to the appropriate BA entry
RB_to_BA = np.zeros( len(RB_beers), dtype=int )-1

#BA_beers[ np.where(BA_brewers == RB_beers[0][0])[0] ]
# can't do a search, since the names are different in places
# I'll have to do this manually. :-\

import codecs
with codecs.open('BA_beer_list.txt','w','utf-8') as f:
    for i in enumerate(BA_beers):
        f.write( unicode(str(i[0]) + ' | ' + i[1][0] + ' | ' + i[1][1] + '\n') )
with codecs.open('RB_beer_list.txt','w','utf-8') as f:
    for i in enumerate(RB_beers):
        f.write( unicode(str(i[0]) + ' | ' + i[1][0] + ' | ' + i[1][1] + '\n') )


# array of manually matched RB to BA
'''
RB_to_BA = [
 [0,3533], 
 [1,21092],
 [2,62145],
 [3,12098],
 [4,56838],
 [5,-1],
 [6,52917],
 [7,1890],
 [8,1828],
 [9,29380],
 [10,58820],
 [11,43231],
 [12,-1],
 [13,57993],
 [14,42614],
 [15,5006],
 [16,32973],
 [17,27880],
 [18,20018],
 [19,31007],
 [20,3176],
 [21,32984],
 [22,20099],
 [23,15832],
 [24,-1],
 [25,12062],
 [26,-1],
 [27,-1],
 [28,43200],
 [29,-1],
 [30,9740],
 [31,36672],
 [32,11302],
 [33,-1],
 [34,51718],
 [35,42605],
 [36,-1],
 [37,55784],
 [38,-1],
 [39,-1],
 [40,-1],
 [41,-1],
 [42,1894],
 [43,19186],
 [44,39668],
 [45,22700],
 [46,52034],
 [47,-1],
 [48,46938],
 [49,-1],
 [50,-1],
 [51,1834],
 [52,8032],
 [53,20088],
 [54,42773],
 [55,63371],
 [56,39706],
 [57,22462],
 [58,17307],
 [59,61780],
 [60,32988],
 [61,49464],
 [62,-1],
 [63,-1],
 [64,-1],
 [65,51151],
 [66,12518],
 [67,1133],
 [68,6687],
 [69,56002],
 [70,27872],
 [71,1094],
 [72,19140],
 [73,-1],
 [74,22463],
 [75,-1],
 [76,-1],
 [77,-1],
 [78,32968],
 [79,20370],
 [80,51202],
 [81,22456],
 [82,-1],
 [83,21175],
 [84,61770],
 [85,51665],
 [86,34005],
 [87,53294],
 [88,-1],
 [89,3128],
 [90,2509],
 [91,2421],
 [92,27432],
 [93,20414],
 [94,11285],
 [95,8090],
 [96,39746],
 [97,26366],
 [98,22206],
 [99,-1],
 [100,56008],
 [101,48762],
 [102,3539],
 [103,37830],
 [104,61963],
 [105,-1],
 [106,39699],
 [107,22196],
 [108,50597],
 [109,36667],
 [110,3519],
 [111,-1],
 [112,-1],
 [113,-1],
 [114,5592],
 [115,1897],
 [116,47780],
 [117,55963],
 [118,56309],
 [119,58791],
 [120,39781],
 [121,337],
 [122,53252],
 [123,12921],
 [124,39498],
 [125,47634],
 [126,36698],
 [127,1055],
 [128,-1],
 [129,-1],
 [130,53310],
 [131,25074],
 [132,-1],
 [133,-1],
 [134,-1],
 [135,58806],
 [136,-1],
 [137,39776],
 [138,33941],
 [139,39780],
 [140,-1],
 [141,-1],
 [142,62139],
 [143,-1],
 [144,28407],
 [145,13151],
 [146,57973],
 [147,12909],
 [148,42086],
 [149,-1],
 [150,53325],
 [151,1134],
 [152,20333],
 [153,18111],
 [154

'''
